// Code generated by oto; DO NOT EDIT.

package <%= def.PackageName %>

import (
	"context"
	"log"
	"net/http"
	
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"

	"github.com/pacedotdev/oto/otohttp"
	<%= for (importPath, name) in def.Imports { %>
	<%= name %> "<%= importPath %>"
	<% } %>
)

var (
<%= for (service) in def.Services { %>
<%= for (method) in service.Methods { %>
    <%= camelize_down(service.Name) %><%= method.Name %>Total = promauto.NewCounter(prometheus.CounterOpts{
		Name: "<%= underscore(service.Name) %>_<%= underscore(method.Name) %>_total",
		Help: "Auto-generated metric incremented on every call to <%= service.Name %>.<%= method.Name %>",
	})
	<%= camelize_down(service.Name) %><%= method.Name %>SuccessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "<%= underscore(service.Name) %>_<%= underscore(method.Name) %>_success_total",
		Help: "Auto-generated metric incremented on every call to <%= service.Name %>.<%= method.Name %> that does not return with an error",
	})
<% } %>
<% } %>
)

<%= for (service) in def.Services { %>
type <%= service.Name %> interface {
<%= for (method) in service.Methods { %>
	<%= method.Name %>(context.Context, <%= method.InputObject.TypeName %>) (*<%= method.OutputObject.TypeName %>, error)<% } %>
}
<% } %>

<%= for (service) in def.Services { %>
type <%= camelize_down(service.Name) %>Server struct {
	server *otohttp.Server
	<%= camelize_down(service.Name) %> <%= service.Name %>
}

func Register<%= service.Name %>(server *otohttp.Server, <%= camelize_down(service.Name) %> <%= service.Name %>) {
	handler := &<%= camelize_down(service.Name) %>Server{
		server: server,
		<%= camelize_down(service.Name) %>: <%= camelize_down(service.Name) %>,
	}
	<%= for (method) in service.Methods { %>server.Register("<%= service.Name %>", "<%= method.Name %>", handler.handle<%= method.Name %>)
	<% } %>}
<%= for (method) in service.Methods { %>
func (s *<%= camelize_down(service.Name) %>Server) handle<%= method.Name %>(w http.ResponseWriter, r *http.Request) {
	<%= camelize_down(service.Name) %><%= method.Name %>Total.Inc()
	var request <%= method.InputObject.TypeName %>
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.<%= camelize_down(service.Name) %>.<%= method.Name %>(r.Context(), request)
	if err != nil {
		log.Println("TODO: oto service error:", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	<%= camelize_down(service.Name) %><%= method.Name %>SuccessTotal.Inc()
}
<% } %>
<% } %>

<%= for (object) in def.Objects { %>
type <%= object.Name %> struct {
	<%= for (field) in object.Fields { %><%= field.Name %> <%= if (field.Type.Multiple == true) { %>[]<% } %><%= field.Type.TypeName %> `json:"<%= camelize_down(field.Name) %><%= if (field.OmitEmpty) { %>,omitempty<% } %>"`
<% } %>
}
<% } %>